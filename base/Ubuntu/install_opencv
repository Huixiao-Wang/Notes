### 通过包管理器安装（适用于Ubuntu/Debian）
这是最简单、快速的方式。

```bash
sudo apt update
sudo apt install libopencv-dev python3-opencv
```

- `libopencv-dev` 安装C++ OpenCV库和开发文件。
- `python3-opencv` 安装OpenCV的Python绑定（可选）。

安装完成后，你可以通过以下命令检查安装是否成功：

```bash
pkg-config --modversion opencv4
```



### 源码编译
从源代码编译OpenCV可以让你安装最新版本，定制构建选项，并确保所有需要的模块都被正确编译。以下是从源代码编译OpenCV的详细步骤。

### 步骤 1：安装依赖项
首先，确保系统上已经安装了编译OpenCV所需的依赖项。

#### 在Ubuntu或Debian上，运行以下命令：
```bash
sudo apt update
sudo apt install build-essential cmake git pkg-config libgtk-3-dev \
     libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
     libxvidcore-dev libx264-dev libjpeg-dev libpng-dev libtiff-dev \
     gfortran openexr libatlas-base-dev python3-dev python3-numpy \
     libtbb2 libtbb-dev libdc1394-22-dev
```

- `build-essential`：包含`gcc`和`g++`等必要编译工具。
- `cmake`：用于构建OpenCV项目。
- 各种开发库（如`libgtk-3-dev`、`libjpeg-dev`等）用于图像处理、视频编解码等功能。

### 步骤 2：下载OpenCV源码
从GitHub克隆OpenCV源码，并下载扩展模块库 `opencv_contrib`（包含额外的功能模块）。

#### 2.1 克隆OpenCV和opencv_contrib仓库：
```bash
# 下载OpenCV主仓库
git clone https://github.com/opencv/opencv.git

# 下载opencv_contrib仓库
git clone https://github.com/opencv/opencv_contrib.git
```

### 步骤 3：构建OpenCV
接下来，通过CMake配置和编译OpenCV。

#### 3.1 创建构建目录
为保持源代码目录的清洁，我们将在OpenCV目录中创建一个单独的 `build` 目录：

```bash
cd opencv
mkdir build
cd build
```

#### 3.2 配置CMake
运行CMake命令来配置构建选项。确保指定了扩展模块路径。

```bash
cmake -D CMAKE_BUILD_TYPE=Release \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
      -D BUILD_EXAMPLES=ON ..
```

解释：
- `CMAKE_BUILD_TYPE=Release`：以Release模式编译，以优化性能。
- `CMAKE_INSTALL_PREFIX=/usr/local`：安装到`/usr/local`目录。
- `OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules`：指定opencv_contrib扩展模块路径。
- `BUILD_EXAMPLES=ON`：编译OpenCV自带的示例代码（可选）。

#### 3.3 开始编译
配置完成后，运行 `make` 命令进行编译：

```bash
make -j$(nproc)
```

- `-j$(nproc)` 选项使用系统的所有CPU核心并行编译，以加速编译过程。

编译可能需要一段时间，具体取决于你的系统性能。

### 步骤 4：安装OpenCV
编译完成后，使用以下命令将OpenCV安装到系统中：

```bash
sudo make install
sudo ldconfig  # 更新共享库链接
```

- `sudo make install` 会将编译好的文件复制到指定的安装目录（这里是 `/usr/local`）。
- `sudo ldconfig` 确保系统可以正确找到OpenCV的库文件。

### 步骤 5：验证OpenCV安装
安装完成后，你可以使用 `pkg-config` 命令来验证OpenCV是否安装成功：

```bash
pkg-config --modversion opencv4
```

你应该看到类似 `4.x.x` 的版本号输出，表示OpenCV安装成功。

此外，你可以编写一个简单的C++或Python程序来测试OpenCV功能。

### 示例：C++代码测试
#### 创建 `test.cpp` 文件：
```cpp
#include <opencv2/opencv.hpp>
#include <iostream>

int main() {
    // 创建一个3x3的矩阵，并显示在终端
    cv::Mat mat = (cv::Mat_<double>(3,3) << 1, 2, 3, 4, 5, 6, 7, 8, 9);
    std::cout << "Matrix: " << std::endl << mat << std::endl;

    return 0;
}
```

#### 编译并运行代码：
```bash
g++ test.cpp -o test `pkg-config --cflags --libs opencv4`
./test
```

### 示例：Python代码测试
如果你安装了Python绑定，也可以通过Python代码测试：

```python
import cv2
print(cv2.__version__)
```

运行该Python脚本后，应该输出OpenCV的版本号。

### 常见问题
1. **CMake找不到OpenCV库**：
   - 确保你使用了正确的OpenCV库路径。
   - 使用 `pkg-config --modversion opencv4` 检查库是否安装正确。

2. **编译速度慢**：
   - 使用 `make -j$(nproc)`，其中 `$(nproc)` 可以自动检测CPU核心数量，加速编译。

### 总结
通过从源代码编译OpenCV，你可以定制安装，并确保最新版本和所有功能模块都可用。使用CMake进行构建管理，可以确保正确链接依赖库，并生成高效的编译结果。

在Linux上安装OpenCV有多种方式，包括使用包管理器、从源代码编译或通过Python的包管理工具安装。以下是不同安装方式的详细步骤。




